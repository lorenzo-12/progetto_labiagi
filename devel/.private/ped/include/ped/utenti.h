// Generated by gencpp from file ped/utenti.msg
// DO NOT EDIT!


#ifndef PED_MESSAGE_UTENTI_H
#define PED_MESSAGE_UTENTI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ped
{
template <class ContainerAllocator>
struct utenti_
{
  typedef utenti_<ContainerAllocator> Type;

  utenti_()
    : name()
    , option()
    , pick()
    , delivery()
    , response()
    , stato()  {
    }
  utenti_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , option(_alloc)
    , pick(_alloc)
    , delivery(_alloc)
    , response(_alloc)
    , stato(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _option_type;
  _option_type option;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pick_type;
  _pick_type pick;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _delivery_type;
  _delivery_type delivery;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_type;
  _response_type response;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stato_type;
  _stato_type stato;





  typedef boost::shared_ptr< ::ped::utenti_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ped::utenti_<ContainerAllocator> const> ConstPtr;

}; // struct utenti_

typedef ::ped::utenti_<std::allocator<void> > utenti;

typedef boost::shared_ptr< ::ped::utenti > utentiPtr;
typedef boost::shared_ptr< ::ped::utenti const> utentiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ped::utenti_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ped::utenti_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ped::utenti_<ContainerAllocator1> & lhs, const ::ped::utenti_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.option == rhs.option &&
    lhs.pick == rhs.pick &&
    lhs.delivery == rhs.delivery &&
    lhs.response == rhs.response &&
    lhs.stato == rhs.stato;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ped::utenti_<ContainerAllocator1> & lhs, const ::ped::utenti_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ped::utenti_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ped::utenti_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ped::utenti_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ped::utenti_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ped::utenti_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ped::utenti_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ped::utenti_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb76f3f6b8ca9967faa9c0f02b8c1ef7";
  }

  static const char* value(const ::ped::utenti_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb76f3f6b8ca9967ULL;
  static const uint64_t static_value2 = 0xfaa9c0f02b8c1ef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ped::utenti_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ped/utenti";
  }

  static const char* value(const ::ped::utenti_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ped::utenti_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string option\n"
"string pick\n"
"string delivery\n"
"string response\n"
"string stato\n"
;
  }

  static const char* value(const ::ped::utenti_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ped::utenti_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.option);
      stream.next(m.pick);
      stream.next(m.delivery);
      stream.next(m.response);
      stream.next(m.stato);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct utenti_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ped::utenti_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ped::utenti_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "option: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.option);
    s << indent << "pick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pick);
    s << indent << "delivery: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.delivery);
    s << indent << "response: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.response);
    s << indent << "stato: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stato);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PED_MESSAGE_UTENTI_H
